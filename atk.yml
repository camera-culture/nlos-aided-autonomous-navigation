name: tbrn
x-optionals:
  gpus:
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
    environment:
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: all
  network_mode_host:
    network_mode: "host"
  x11:
    volumes:
      - "/tmp/.X11-unix:/tmp/.X11-unix"
    environment:
      DISPLAY: "${DISPLAY:-0}"
  vnc:
    environment:
      DISPLAY: "vnc:0.0"
  vl5317ch:
    devices:
      - /dev/cu.usbmodem1103
services:
  tbrn:
    image: "atk/${COMPOSE_PROJECT_NAME}:tbrn"
    hostname: "${COMPOSE_PROJECT_NAME}"
    container_name: "${COMPOSE_PROJECT_NAME}-tbrn"
    env_file: "atk.env"
    build:
      context: "./"
      network: "host"
      dockerfile: "./docker/tbrn.dockerfile"
      args:
        PROJECT: "${COMPOSE_PROJECT_NAME}"
        IMAGE_BASE: "nvidia/cuda"
        IMAGE_TAG: "12.2.2-devel-ubuntu22.04"
        USER_GROUPS: "dialout video"
        APT_DEPENDENCIES: "${DEFAULT_APT_DEPENDENCIES:-} git build-essential ffmpeg vim default-jre openmpi-bin openmpi-doc libopenmpi-dev"
        PIP_REQUIREMENTS: "${DEFAULT_PIP_REQUIREMENTS:-} numpy<2 scipy scikit-image imageio[ffmpeg] opencv-python matplotlib omegaconf hydra-core hydra_zen casadi osqp shapely ipykernel torch plotly"
        CONDA_ENVIRONMENT_FILE: "environment.yml"
        PIP_REQUIREMENTS_FILE: "requirements.txt"
        MITSUBA_REPO: "https://github.com/dartmouth-risc-lab/Mitsuba3ToF.git"
        CHRONO_REPO: "https://github.com/uwsbel/chrono-wisc.git"
        CHRONO_BRANCH: "volumetrics-develop"
        OPTIX_SCRIPT: "docker/data/NVIDIA-OptiX-SDK-7.7.0-linux64-x86_64.sh"
        ROS_DISTRO: "humble"
    volumes:
      - "./:/home/${COMPOSE_PROJECT_NAME}/${COMPOSE_PROJECT_NAME}"
    working_dir: "/home/${COMPOSE_PROJECT_NAME}/${COMPOSE_PROJECT_NAME}"
    tty: true
  vnc:
    image: "${COMPOSE_PROJECT_NAME}:vnc"
    hostname: "${COMPOSE_PROJECT_NAME}-vnc"
    container_name: "${COMPOSE_PROJECT_NAME}-vnc"
    build:
      context: "./"
      dockerfile: "./docker/vnc.dockerfile"
      network: "host"
      args:
        VNC_PASSWORD: "${COMPOSE_PROJECT_NAME}"
    ports:
      - "127.0.0.1:8080-8099:8080"
      - "127.0.0.1:5900-5999:5900"
networks:
  default:
    name: "${COMPOSE_PROJECT_NAME}"
